// Code generated by goa v3.11.0, DO NOT EDIT.
//
// card gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/comi91262/domilike/design

package client

import (
	"context"

	card "github.com/comi91262/domilike/gen/card"
	cardpb "github.com/comi91262/domilike/gen/grpc/card/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetFunc builds the remote method to invoke for "card" service "get"
// endpoint.
func BuildGetFunc(grpccli cardpb.CardClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*cardpb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &cardpb.GetRequest{}, opts...)
	}
}

// EncodeGetRequest encodes requests sent to card get endpoint.
func EncodeGetRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*card.GetPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("card", "get", "*card.GetPayload", v)
	}
	return NewProtoGetRequest(payload), nil
}

// DecodeGetResponse decodes responses from the card get endpoint.
func DecodeGetResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*cardpb.GetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("card", "get", "*cardpb.GetResponse", v)
	}
	res := NewGetResult(message)
	return res, nil
}
