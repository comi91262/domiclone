// Code generated by goa v3.11.0, DO NOT EDIT.
//
// player-information endpoints
//
// Command:
// $ goa gen github.com/comi91262/domilike/design

package playerinformation

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "player-information" service endpoints.
type Endpoints struct {
	Create           goa.Endpoint
	Delete           goa.Endpoint
	GetCoins         goa.Endpoint
	GetVictoryPoints goa.Endpoint
	GetDecks         goa.Endpoint
	GetDiscards      goa.Endpoint
	GetHands         goa.Endpoint
	GetPlayArea      goa.Endpoint
}

// NewEndpoints wraps the methods of the "player-information" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Create:           NewCreateEndpoint(s, a.JWTAuth),
		Delete:           NewDeleteEndpoint(s, a.JWTAuth),
		GetCoins:         NewGetCoinsEndpoint(s, a.JWTAuth),
		GetVictoryPoints: NewGetVictoryPointsEndpoint(s, a.JWTAuth),
		GetDecks:         NewGetDecksEndpoint(s, a.JWTAuth),
		GetDiscards:      NewGetDiscardsEndpoint(s, a.JWTAuth),
		GetHands:         NewGetHandsEndpoint(s, a.JWTAuth),
		GetPlayArea:      NewGetPlayAreaEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "player-information" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Create = m(e.Create)
	e.Delete = m(e.Delete)
	e.GetCoins = m(e.GetCoins)
	e.GetVictoryPoints = m(e.GetVictoryPoints)
	e.GetDecks = m(e.GetDecks)
	e.GetDiscards = m(e.GetDiscards)
	e.GetHands = m(e.GetHands)
	e.GetPlayArea = m(e.GetPlayArea)
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "player-information".
func NewCreateEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreatePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Create(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "player-information".
func NewDeleteEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeletePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Delete(ctx, p)
	}
}

// NewGetCoinsEndpoint returns an endpoint function that calls the method
// "get_coins" of service "player-information".
func NewGetCoinsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetCoinsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetCoins(ctx, p)
	}
}

// NewGetVictoryPointsEndpoint returns an endpoint function that calls the
// method "get_victory_points" of service "player-information".
func NewGetVictoryPointsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetVictoryPointsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetVictoryPoints(ctx, p)
	}
}

// NewGetDecksEndpoint returns an endpoint function that calls the method
// "get_decks" of service "player-information".
func NewGetDecksEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetDecksPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetDecks(ctx, p)
	}
}

// NewGetDiscardsEndpoint returns an endpoint function that calls the method
// "get_discards" of service "player-information".
func NewGetDiscardsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetDiscardsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetDiscards(ctx, p)
	}
}

// NewGetHandsEndpoint returns an endpoint function that calls the method
// "get_hands" of service "player-information".
func NewGetHandsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetHandsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetHands(ctx, p)
	}
}

// NewGetPlayAreaEndpoint returns an endpoint function that calls the method
// "get_play_area" of service "player-information".
func NewGetPlayAreaEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetPlayAreaPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetPlayArea(ctx, p)
	}
}
