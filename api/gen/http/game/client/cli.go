// Code generated by goa v3.11.0, DO NOT EDIT.
//
// game HTTP client CLI support package
//
// Command:
// $ goa gen github.com/comi91262/domilike/design

package client

import (
	"fmt"
	"strconv"

	game "github.com/comi91262/domilike/gen/game"
)

// BuildGetPayload builds the payload for the game get endpoint from CLI flags.
func BuildGetPayload(gameGetID string) (*game.GetPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(gameGetID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &game.GetPayload{}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the game delete endpoint from CLI
// flags.
func BuildDeletePayload(gameDeleteID string) (*game.DeletePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(gameDeleteID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &game.DeletePayload{}
	v.ID = id

	return v, nil
}

// BuildGetSuppliesPayload builds the payload for the game get_supplies
// endpoint from CLI flags.
func BuildGetSuppliesPayload(gameGetSuppliesID string) (*game.GetSuppliesPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(gameGetSuppliesID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &game.GetSuppliesPayload{}
	v.ID = id

	return v, nil
}

// BuildGetTrashesPayload builds the payload for the game get_trashes endpoint
// from CLI flags.
func BuildGetTrashesPayload(gameGetTrashesID string) (*game.GetTrashesPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(gameGetTrashesID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &game.GetTrashesPayload{}
	v.ID = id

	return v, nil
}
